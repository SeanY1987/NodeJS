# node.js基础知识总结
### open
- 在name.js的当前文件夹下  按住shift +鼠标右键 -->>在此打开命令窗 运行 node name.js
- webStrom 右键 run name.js

## 变量
- 1.我们通过var创建的变量不是挂载global上的，如果没有var的就会挂载在global上

```
a=100;
console.log(global.a);//100
console.log(a);//100
//console.log(window.a);//报错 window is not undefined
var b = 2000;
console.log(b);//2000
//console.log(window.b);/报错 window is not undefined
console.log(global.b);//undefined

console.log(this);//{}
exports.name=a;
console.log(this);//{name:100}
```

## 控制台 console
    - stdout :(standard output) 标准输出
    - stderr :(standard error) 标准错误
- console.log([data], [...])   
- console.info([data], [...])
- console.error([data], [...])
- console.warn([data], [...])
- console.dir(obj)
- console.time(label) //标记一个时间点。
- console.timeEnd(label)//结束计时器，记录输出。
    
    ```
    console.time('sameName');
    for(var i=0;i<100;i++){
    
    }
    console.timeEnd('sameName'); //sameName: 0.588ms
    ```
- console.trace(label)  //打印当前位置的栈跟踪到 stderr
- console.assert(expression, [message])
//与 assert.ok() 相同，如果 expression 执行结果为 false 则抛出一个带上 message 的 AssertionError

- console.log(_dirname);//当前文件所在的文件夹
- console.log(_filename);//当前文件的名字

## process
- process对象是一个全局对象，可以在任何地方访问到它。 它是EventEmitter的一个实例。
    ### 属性
    - process.argv （一个包含命令行参数的数组。第一个元素是’node.exe’地址，第二个元素是JavaScript文件地址。接下来的元素则是附加的命令行参数。）例如在bat的文件这样写。node app 127.0.0.1 7001  这时候通过.argv [2] 得到IP，argv[3]得到端口，更方便我们修改配置。
    - process.pid//就是当前进程的id
    - process.kill(process.pid);
    - process.memoryUsage();//内存使用情况
    - process.cwd();//当前进程工作目录
    - process.chdir();//改变当前进程的工作目录
    - process.nextTick(callback);//在事件循环的下一次循环中调用callback回调函数
    
    #### [setTimeout和setImmediate和process.nextTick 详细](https://github.com/SeanY1987/NodeJS/blob/master/1.01setTimeout和setImmediate和process.nextTick.markdown)
    ```
    //更详细点击上面的连接
    //当前事件列表的最底部
    process.nextTick(function () {
        console.log('开开心心');
        process.nextTick(function () {
            console.log('吃肉');
            setImmediate(function () {
                console.log('再考试');
            });
        });
    });
    //下一张表的
    setImmediate(function () {
        console.log('明天考试');
    });*/
    //cwd   current working directory
    console.log('第1次',process.cwd());
    ```
    注意输出顺序
    ```
    通过stdout.write输出f:\JS\8.NodeJs\1笔记\练习
    开开心心
    吃肉
    明天考试
    再考试
    ```
    
    
    ## module 模块
    - 导出模块 module.exports
    - 引入模块 require('./pathAndName')
        - //一个文件require多次只执行一次
        - require.resolve();//绝对路径
        - delete require.cache[src];//删除缓存
    
    ### node核心模块
       - http:提供http服务器功能。
       - url:解析url
       - fs:与文件系统交互
       - querystring:解析url的查询字符串
       - child_process:新建子进程
       - util:提供一系列实用小工具
       - path:处理文件路径
       - crypto:提供加密和解锁功能，基本上是对OpenSSL的包装。
    #### 注意与拓展
        - 1、module变量是整个模块文件的顶层变量，它的exports属性就是模块向外输出的接口。如果直接输出一个函数，那么调用模块就是调用一个函数，但是，模块也可以输出一个对象。
        - 2、Node模块采用了CommonJS规范：
        CommonJS规范定义的模块分为:{模块引用(require)} {模块定义(exports)} {模块标识(module)}
        require()用来引入外部模块；exports对象用于导出当前模块的方法或变量，唯一的导出口；module对象就代表模块本身。
        - 3、根据COmmonJS规范，一个单独的文件就好似一个模块。每一个模块都是一个单独的作用域，也就是说，在一个文件定义的变量(还包括函数和类)，都是私有的，对其他文件是不可见的。
            如果想在多个文件分享变量，必须定义为global对象的属性。
            global.warning = true;
            warning变量，是可以被所有文件读取的。
            CommonJS规定，每个文件的对外接口是module.exports对象。
            这个对象的所有属性和方法，都可以被其他文件导入。
        - 4、module对象
            每个模块内部，都有一个module对象，代表当前模块，有以下属性。
            module.id   模块的标识符，通常是带有绝对路径的模块文件名。
            module.filename 模块的文件名，值为此模块的绝对路径。
            module.loaded   返回一个布尔值，表示本模块是否已经加载完成。
            module.parent   返回一个对象，表示调用该模块的模块。
            module.children 返回一个数组，表示该模块要用到的其他模块，也就是require的其他模块。
        - 5、require命令基本用法
            node内置的require命令用于加载模块文件。
            require的基本功能是，读入并执行一个javascript文件，然后返回该模块的exports对象。
            如果没有发现指定模块，会报错。
            如果想得到require命令加载的确切文件名，使用require.resolve()方法。见上
            
    #### tips 
    - 内置模块 文件模块  第三方模块
      如果不加./ 不是内置模块就是第三方模块
      require('./');
      如果核心模块木有找到 就找我们node_modules文件，通过module.paths 找到为止找不到就要报错
    - 引用自己的包
      会默认先找index.js 再找index.json
      如果没找到，再通过package.json去查找main字段找到对应指定的index
      如果还找不到 往上一级node_modules里找
      直接用：引入
      require('jiang');
      require('./person.js');
      require('./util.js');
    
    #### util:提供一系列实用小工具
        
       - util.inherits(B,A);//B继承A
       - util.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。(相当于console.dir())
          - 它至少接受一个参数 object，即要转换的对象。
          - showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。
          - depth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。
          - 如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。
          - 特别要指出的是，util.inspect 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。
          - util.inspect(obj,{showHidden:true,depth:0,colors:true});
       - //工具类上的方法
         console.log(util.isArray([]));//true
         console.log(util.isError(new Error()));//true
         console.log(util.isDate(new Date()));//true
         console.log(util.isRegExp(new RegExp('')));//true
## buffer


 